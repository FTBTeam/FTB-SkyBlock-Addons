plugins {
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id "maven-publish"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

def ENV = System.getenv()

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+mc${project.minecraft_version}"
group = project.maven_group

// needs to be done AFTER version is set
apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfigs = [
//                "ftbsba.mixins.json"
        ]

        dataGen {
            mod project.mod_id
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
    maven { url "https://www.cursemaven.com" }
    maven { url "https://maven.saps.dev/releases" }
    maven { url "https://maven.architectury.dev/" }
	maven {
		url "https://maven.blamejared.com"
		content {
			includeGroup "mezz.jei"
		}
	}
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()

    forge "net.minecraftforge:forge:${project.forge_version}"

	modCompileOnly("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
	modCompileOnly("mezz.jei:jei-${project.minecraft_version}-forge-api:${project.jei_version}")
	modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}")

    modImplementation("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    modImplementation("dev.latvian.mods:rhino-forge:${rhino_version}")

    modImplementation ("curse.maven:jade-324717:${jade_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id
			releaseType = ftbPublishing.relType
			addGameVersion "Forge"
			addGameVersion project.minecraft_version
			mainArtifact(remapJar.archiveFile)
			relations {
				requiredDependency 'ftb-library-forge'
				optionalDependency 'jade'
			}
			changelog = ENV.CHANGELOG  // expected to exist if ENV.CURSEFORGE does
			changelogType = 'markdown'
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archivesBaseName
			version ftbPublishing.mavenVersion
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		if (ftbPublishing.ftbToken) {
			maven {
				url ftbPublishing.ftbURL
				credentials {
					username = ftbPublishing.ftbUser
					password = ftbPublishing.ftbToken
				}
			}
		}

		if (ftbPublishing.sapsToken) {
			maven {
				url ftbPublishing.sapsURL
				credentials {
					username = ftbPublishing.sapsUser
					password = ftbPublishing.sapsToken
				}
			}
		}
	}
}
